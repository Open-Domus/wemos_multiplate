globals:
  - id: current_page     # 0 = empty, 1 = readout, 2 = trends
    type: int
    restore_value: no
    initial_value: '1'

script:
  - id: show_page_empty
    then:
      - display.page.show: display_page_empty
      - lambda: 'id(current_page) = 0;'

  - id: show_page_readout
    then:
      - display.page.show: display_page_readout
      - lambda: 'id(current_page) = 1;'

  - id: show_page_trends
    then:
      - display.page.show: display_page_trends
      - lambda: 'id(current_page) = 2;'

  - id: toggle_non_empty_pages
    then:
      - if:
          condition:
            lambda: 'return id(current_page) == 1;'
          then:
            - script.execute: show_page_trends
          else:
            - if:
                condition:
                  lambda: 'return id(current_page) == 2;'
                then:
                  - script.execute: show_page_readout
                else:
                  - lambda: |-
                      // current_page == 0 (empty) -> do nothing
                      return;

# Auto-switch every 10s, but ONLY if not on the empty page
interval:
  - interval: 10s
    then:
      - if:
          condition:
            lambda: 'return id(current_page) != 0;'
          then:
            - script.execute: toggle_non_empty_pages

graph:
  - id: temp_graph
    duration: 4h
    width: 126
    height: 46
    y_grid: 1.0
    x_grid: 60min
    traces:
      - sensor: temperature_sensor

display:
  - platform: ssd1306_i2c
    id: oled_display
    model: SSD1306 128x64
    rotation: "180"
    address: 0x3C
    pages:
      # Empty page
      - id: display_page_empty
        lambda: |-
          it.fill(COLOR_OFF);

      # Page 1 — Readout
      - id: display_page_readout
        lambda: |-
          it.fill(COLOR_OFF);

          // Time
          it.strftime(2, 62, id(font_xs), TextAlign::BOTTOM_LEFT, "%H:%M", id(display_time).now());

          // Temp
          if (id(temperature_sensor).has_state()) {
            it.printf(64, 6, id(font_xl), TextAlign::TOP_CENTER, "%.1f", id(temperature_sensor).state);
          } else {
            it.printf(64, 6, id(font_xl), TextAlign::TOP_CENTER, "--.-");
          }

          // Humidity
          if (id(humidity_sensor).has_state()) {
            it.printf(126, 62, id(font_xs), TextAlign::BOTTOM_RIGHT, "%.0f%%", id(humidity_sensor).state);
          } else {
            it.printf(126, 62, id(font_xs), TextAlign::BOTTOM_RIGHT, "--%%");
          }

      # Page 2 — Graphs
      - id: display_page_trends
        lambda: |-
          it.fill(COLOR_OFF);
          it.graph(2, 2, id(temp_graph));
          it.printf(2, 62,  id(font_xs), TextAlign::BOTTOM_LEFT, "Temp 4h");
          it.printf(126, 62,  id(font_xs), TextAlign::BOTTOM_RIGHT, "%.1f", id(temperature_sensor).state);

font:
  - file: font/retrogaming.ttf
    id: font_xs
    size: 11
    glyphs: '!"%*()+=,-_.:0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ abcdefghijklmnopqrstuvwxyz'
  - file: font/retrogaming.ttf
    id: font_xl
    size: 34
    glyphs: 

time:
  - platform: homeassistant
    id: display_time
